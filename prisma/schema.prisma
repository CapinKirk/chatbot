// Prisma schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  displayName String
  avatarUrl   String?
  active      Boolean  @default(true)
  source      String   // 'slack' | 'local'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  messages    Message[]
  subscriptions NotificationSubscription[]
}

model Conversation {
  id        String   @id @default(uuid())
  status    String   // open | assigned | closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  Message[]
  decisions RouteDecision[]
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  senderId       String?
  role           String   // user | agent | system | bot
  content        String
  clientGeneratedId String?
  createdAt      DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User?        @relation(fields: [senderId], references: [id])

  @@unique([conversationId, clientGeneratedId])
}

model RouteDecision {
  id               String   @id @default(uuid())
  conversationId   String
  messageId        String
  intent           String   // support | sales | billing | unknown
  confidence       Float
  destinationType  String   // user | queue | triage
  destinationId    String?
  modelVersion     String
  promptId         String
  thresholdRoute   Float
  thresholdUnknown Float
  mode             String   // live | shadow
  reason           String   // ok | low_confidence | timeout | error | provider_rate_limited | manual_override
  createdAt        DateTime @default(now())

  conversation     Conversation @relation(fields: [conversationId], references: [id])
}

model NotificationSubscription {
  id        String   @id @default(uuid())
  userId    String
  endpoint  String
  keys      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User @relation(fields: [userId], references: [id])
}

model Credential {
  id        String   @id @default(uuid())
  type      String   // slack | vapid
  json      Json
  rotatedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SyncLog {
  id        String   @id @default(uuid())
  type      String   // slackUsers
  status    String
  details   Json
  createdAt DateTime @default(now())
}

model BotEvalRun {
  id            String   @id @default(uuid())
  runAt         DateTime @default(now())
  dataset       String
  modelVersion  String
  promptId      String
  metrics       Json
}

